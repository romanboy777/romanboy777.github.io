//module 2 daa

//optimal binary search
#include <stdio.h>
struct mat{
 int w,c,r;
};
int arr[100],n;
int mind(int arr[], int size) {
    int minIndex = 0;
    for (int i = 1; i < size; i++) {
        if (arr[i] < arr[minIndex]) {
            minIndex = i;
        }
    }
    return minIndex;
}
int print(struct mat a[][n+1],int i,int j){
  printf("Left child of %d is :: %d\n",a[i][j].r,a[i][a[i][j].r-1].r);
  printf("Right child of %d is :: %d\n",a[i][j].r,a[a[i][j].r][j].r);
  if(a[i][a[i][j].r-1].r!=0){
  print(a,i,a[i][j].r-1);}
  if(a[a[i][j].r][j].r!=0){
  print(a,a[i][j].r,j);}
}
int main(){
 int i,j,k;
 scanf("%d",&n);
 int b[n],c[n+1];
 for(i=0;i<n;i++){
  scanf("%d",&b[i]);
 }
 for(i=0;i<=n;i++){
  scanf("%d",&c[i]);
 }
 int l=n;
 struct mat a[n+1][n+1];
 for (int d = 0; d <= n; d++) {
        for (i = 0; i <= n; i++) {
            j = i + d;
            if (j <= n) {
    if(i==j){
     a[i][j].w=c[i];
     a[i][j].c=0;
     a[i][j].r=0;
    }
    else{
     a[i][j].w=a[i][j-1].w+b[j-1]+c[j];
     int n1=(i-j),k=0;
     for(int n2=i+1;n2<=j;n2++){
       arr[k++]=a[i][n2-1].c+a[n2][j].c;
     }
     printf("\n");
     a[i][j].c=arr[mind(arr,k)]+a[i][j].w;
     a[i][j].r=mind(arr,k)+i+1;
    }
            }
        }
    }
 printf("Optimal BST is :: w values are:\n");
 for (int diff = 0; diff <= n; diff++) {
        for (i = 0; i <= n; i++) {
            j = i + diff;
            if (j <= n) {
                printf("%d ",a[i][j].w);
            }
        }
        printf("\n");
    }
 printf("c values are:\n");
    for (int diff = 0; diff <= n; diff++) {
        for (i = 0; i <= n; i++) {
            j = i + diff;
            if (j <= n) {
                printf("%d ",a[i][j].c);
            }
        }
        printf("\n");
    }
 printf("r values are:\n");
 int x,y;
    for (int diff = 0; diff <= n; diff++) {
        for (i = 0; i <= n; i++) {
            j = i + diff;
            if (j <= n) {
                printf("%d ",a[i][j].r);
    x=i;y=j;
            }
        }
        printf("\n");
    }
 printf("Root is %d\n",a[x][y].r);
 print(a,x,y);
}

-------------------------------------------------------------------------------------------
//matrix chain multiplication//
#include <stdio.h>
#include <limits.h>

#define MAX_SIZE 100

// Function to calculate the minimum number of scalar multiplications needed
// to compute the product of a chain of matrices
void matrixChainOrder(int p[], int n, int cost[MAX_SIZE][MAX_SIZE], int sequence[MAX_SIZE][MAX_SIZE]) {
    int i, j, k, L, q;
   
    // cost[i][j] represents the minimum number of scalar multiplications needed
    // to compute the product of matrices AiAi+1...Aj
    for (i = 1; i <= n; i++) {
        cost[i][i] = 0;
    }
   
    for (L = 2; L <= n; L++) {
        for (i = 1; i <= n-L+1; i++) {
            j = i+L-1;
            cost[i][j] = INT_MAX;
            for (k = i; k <= j-1; k++) {
                q = cost[i][k] + cost[k+1][j] + p[i-1]*p[k]*p[j];
                if (q < cost[i][j]) {
                    cost[i][j] = q;
                    sequence[i][j] = k;
                }
            }
        }
    }
}

// Function to print the optimal parenthesization of matrices in a chain
void printOptimalParenthesis(int sequence[MAX_SIZE][MAX_SIZE], int i, int j) {
    if (i == j) {
        printf("a%d", i);
    } else {
        printf("(");
        printOptimalParenthesis(sequence, i, sequence[i][j]);
        printOptimalParenthesis(sequence, sequence[i][j]+1, j);
        printf(")");
    }
}

int main() {
    int n, p[MAX_SIZE], cost[MAX_SIZE][MAX_SIZE], sequence[MAX_SIZE][MAX_SIZE], i, j;
   
   
    scanf("%d", &n);
   
   
    for (i = 0; i <= n; i++) {
        scanf("%d", &p[i]);
    }
   
    matrixChainOrder(p, n, cost, sequence);
   
    printf("cost matrix:\n");
    for (i = 1; i <= n; i++) {
        for (j = 1; j <= n; j++) {
            printf("%d ", cost[i][j]);
        }
        printf("\n");
    }
   
    printf("sequence matrix:\n");
    for (i = 1; i <= n; i++) {
        for (j = 1; j <= n; j++) {
            printf("%d ", sequence[i][j]);
        }
        printf("\n");
    }
   
    printf("Optimal ordering is: ");
    printOptimalParenthesis(sequence, 1, n);
    printf("\n");
   
    printf("cost of matrix chain multiplication: %d\n", cost[1][n]);
   
    return 0;
}

---------------------------------------------------------------------------

//all pairs shortest path
#include <stdio.h>
int main(){
	int n;
	scanf("%d",&n);
	int a[n][n],i,j,k,l=0;
	for(i=0;i<n;i++){
		for(j=0;j<n;j++){
			scanf("%d",&a[i][j]);
			if(a[i][j]==0){
				a[i][j]=999;
			}
		}
	}
	for(k=0;k<n;k++){
		for(i=0;i<n;i++){
			for(j=0;j<n;j++){
				l=a[i][k]+a[k][j];
				a[i][j]=a[i][j]<l?a[i][j]:l;

			}
		}

	}
	for(i=0;i<n;i++){
		a[i][i]=0;
	}
	for(i=0;i<n;i++){
		for(j=0;j<n;j++){
			printf("%d ",a[i][j]);
		}
		printf("\n");
	}
}

------------------------------------------------------------------------------

//travelling sales person problem//
#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

#define N 20

int n;
int dist[N][N];
int memo[N][1 << N];

int tsp(int current, int visited) {
    if (visited == (1 << n) - 1) {
        return dist[current][0];
    }
    if (memo[current][visited] != -1) {
        return memo[current][visited];
    }
    int ans = INT_MAX;
    for (int i = 0; i < n; i++) {
        if ((visited & (1 << i)) == 0) {
            int cost = dist[current][i] + tsp(i, visited | (1 << i));
            if (cost < ans) {
                ans = cost;
                memo[current][visited] = ans;
            }
        }
    }
    return ans;
}

void print_path(int current, int visited) {
    printf("%c", 'A' + current);
    if (visited == (1 << n) - 1) {
        return;
    }
    int min_cost = INT_MAX, next_city;
    for (int i = 0; i < n; i++) {
        if ((visited & (1 << i)) == 0) {
            int cost = dist[current][i] + memo[i][visited | (1 << i)];
            if (cost < min_cost) {
                min_cost = cost;
                next_city = i;
            }
        }
    }
    printf("->");
    print_path(next_city, visited | (1 << next_city));
}

int main() {
  //  printf("Enter the number of cities: ");
    scanf("%d", &n);
    //printf("Enter the distance matrix:\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            scanf("%d", &dist[i][j]);
        }
    }
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < (1 << n); j++) {
            memo[i][j] = -1;
        }
    }
    int min_cost = tsp(0, 1);
   // printf("Path: ");
    print_path(0, 1);
    printf("->A\n");
    printf("Min Cost = %d\n", min_cost);
    return 0;
}

-----------------------------------------------------------------------------

// n queens

#include <stdio.h>
#define MAX_N 100
int n;
int a[MAX_N+1];
int s=0;
int place(int pos){
	int i;
	for(i=0;i<pos;i++){
		if(a[i]==a[pos] || i-pos==a[i]-a[pos] || i-pos==a[pos]-a[i]){
			return 0;
		}
	}
	return 1;
}
void print(int num){
	int i,j;
	printf("Solution: %d\n",num);
	//printf("\n");
	for(i=1;i<=n;i++){
		for(j=1;j<=n;j++){
			if(a[i]==j){
				printf("Q ");
			}else{
				printf("+ ");
			}
		}
		printf("\n");
	}
}

int queen(int n){
	int k=1;
	a[k]=0;
	while(k!=0){
		a[k]=a[k]+1;
		while(a[k]<=n && !place(k)){
			a[k]=a[k]+1;
		}
		if(a[k]<=n){
			if(k==n){
				s++;
				print(s);
			}
			else{
				k=k+1;
				a[k]=0;
			}
		}else{
			k=k-1;
		}
	}
}
int main(){
	scanf("%d",&n);
	queen(n);
	printf("Total sol=%d ",s);
	return 0;
}


or

#include<stdio.h>
#include<math.h>
#include<stdlib.h>
int board[20],count;
int main()
{
int n,i,j;
void queen(int row,int n);
scanf("%d",&n);
queen(1,n);
printf("\nTotal sol=%d",count);
return 0;
}
void print(int n)
{
int i,j;
printf("\n\nSolution: %d\n\n",++count);
for(i=1;i<=n;++i)
  printf(" \t%d",i);
for(i=1;i<=n;++i)
{
  printf("\n%d",i);
  for(j=1;j<=n;++j) 
  {
   if(board[i]==j)
    printf("Q "); 
   else
    printf("+ ");
  }
}
}
int place(int row,int column)
{
int i;
for(i=1;i<=row-1;++i)
{
  if(board[i]==column)
   return 0;
  else
   if(abs(board[i]-column)==abs(i-row))
    return 0;
}
return 1; 
}
 void queen(int row,int n)
{
int column;
for(column=1;column<=n;++column)
{
  if(place(row,column))
  {
   board[row]=column; 
   if(row==n) 
    print(n); 
   else 
    queen(row+1,n);
  }
}
}
..............................................................................................
**sum of subsets**

#include<stdio.h>
int n;
int m;
int a[100];
int track[100];
int flag=0;
void backtrack(int a[],int n1,int sum1)
{
 int sum=sum1,i;
 if(sum==m)
 {
 flag=1;
 for(i=0;i<n;i++)
 if(track[i]==1)
 printf("%d ",a[i]);
 printf("\n");
 return;
 }
 if(sum>m)
 return ;
 for(i=n1;i>=0;i--)
 {
 sum=sum+a[i];
 track[i]=1;
 backtrack(a,i-1,sum);
 sum=sum-a[i];
 track[i]=0;
 }
}
int main()
{
 scanf("%d",&n);
 scanf("%d",&m);
 int i;
 for(i=0;i<n;i++)
 scanf("%d",&a[i]);
 for(i=0;i<n;i++)
 track[i]=0;
 backtrack(a,n-1,0);
 if(flag==0)
 printf("No Solution");
}
