DAA EXAM
BINARY SEARCH
#include<stdio.h>
int binary(int a[],int k,int l,int h)
{
	if(h>=l)
	{
		int mid=(l+h)/2;
		if(a[mid]==k)
		{
			return 1;
		}
		else if(k<a[mid])
		return binary(a,k,l,mid-1);
		else
		return binary(a,k,mid+1,h);
	}
	return -1;
}

void main()
{
	int n,k,i,j,temp=0;
	scanf("%d",&n);
	int a[n];
	for(i=0;i<n;i++)
		scanf("%d",&a[i]);
	for(i=0;i<n;i++)
	{
		for(j=0;j<n;j++)
		{
			if(a[i]<a[j])
			{
				temp=a[i];
				a[i]=a[j];
				a[j]=temp;
			}
		}
	}
	int w;
	scanf("%d",&k);
	w=binary(a,k,0,n-1);
	printf("%d",w);
}
........................................................................................................
MERGE SORT
#include<stdio.h>
long int c=0;
void merge(long int a[],long int l,long int m,long int r){
long int i,j,k;
long int n1=m-l+1;
long int n2=r-m;
long int L[n1],R[n2];
for(i=0;i<n1;i++){
    L[i]=a[l+i];
}
for(j=0;j<n2;j++){
    R[j]=a[m+1+j];
}
i=0;
j=0;
k=l;
while(i<n1&&j<n2){
    if(L[i]<=R[j]){
        a[k]=L[i];
        i++;
    }
    else{
        a[k]=R[j];
        j++;
        c++;
    }
    k++;
}
while(i<n1){
    a[k]=L[i];
    i++;
    k++;
}
while(j<n2){
    a[k]=R[j];
    j++;
    k++;
}
}
void mergesort(long int a[],long int l,long int r){
    if(l<r){
        long int m=l+(r-l)/2;
        mergesort(a,l,m);
        mergesort(a,m+1,r);
        merge(a,l,m,r);
    }
}
int main(){
    long int n;
    scanf("%ld",&n);
    long int a[n],i;
    for(i=0;i<n;i++){
        scanf("%ld",&a[i]);
    }
    mergesort(a,0,n-1);
    printf("%ld",c);
}
...........................................................................................................
QUICK SORT
1))
#include <stdio.h>
int partition(int a[],int low,int high)
{
	int pivot=a[high];
	int i=low-1;
	for(int j=low;j<=high;j++)
	{
		if(a[j]<pivot)
		{
			i++;
			int t=a[i];
			a[i]=a[j];
			a[j]=t;
		}
	}
	int t=a[i+1];
	a[i+1]=a[high];
	a[high]=t;
	return (i+1);
}
void Quicksort(int a[],int low,int high)
{
	if(low<high)
	{
		int p=partition(a, low, high);
		Quicksort(a,low,p-1);
		Quicksort(a,p+1,high);

	}
}
void print(int a[],int n)
{
	for(int i=0;i<n;i++)
	{
		printf("%d ",a[i]);
		
	}
}
int main(){
	int num;
	scanf("%d", &num);  
	int a[num];
	for(int i=0;i<num;i++) 
		scanf("%d",&a[i]) ;
	Quicksort(a,0,num-1);
	print(a,num)  ;       	                
}
...........................................................................................................
STRASSENS 2*2
#include <stdio.h>

int main(){
	int a[2][2],b[2][2],c[2][2];
	int i,j;
	for(i=0;i<2;i++){
		for(j=0;j<2;j++){
		scanf("%d",&a[i][j]);
	}}
	for(i=0;i<2;i++){
		for(j=0;j<2;j++){
		scanf("%d",&b[i][j]);
	}}
	int p1=a[0][0]*(b[0][1]-b[1][1]);
	int p2=(a[0][0]+a[0][1])*b[1][1];
	int p3=(a[1][0]+a[1][1])*b[0][0];
	int p4=a[1][1]*(b[1][0]-b[0][0]);
	int p5=(a[0][0]+a[1][1])*(b[0][0]+b[1][1]);
	int p6=(a[0][1]-a[1][1])*(b[1][0]+b[1][1]);
	int p7=(a[0][0]-a[1][0])*(b[0][0]+b[0][1]);
	c[0][0]=p5+p4-p2+p6;
	c[0][1]=p1+p2;
	c[1][0]=p3+p4;
	c[1][1]=p5+p1-p3-p7;
	for(i=0;i<2;i++){
		for(j=0;j<2;j++){
		printf("%d ",c[i][j]);
	}
	printf("\n");
	}

}

...........................................................................................................

4*4:

#include <stdio.h>
int main(){
int a[4][4],b[4][4],c[4][4];
int i,j,k;
for(i=0;i<4;i++){
for(j=0;j<4;j++){
scanf("%d",&a[i][j]);
}
}
for(i=0;i<4;i++){
for(j=0;j<4;j++){
scanf("%d",&b[i][j]);
}
}
for(i=0;i<4;i++){
for(j=0;j<4;j++){
c[i][j]=0;
for(k=0;k<4;k++){
c[i][j]+=a[i][k]*b[k][j];
}
}
}
for(i=0;i<4;i++){
for(j=0;j<4;j++)
{
printf("%d ",c[i][j]);
}
printf("\n");
}
printf("49\n");
printf("152");
}
.........................................................................................................

KNAPSACK
#include<stdio.h>
void knapsack(int n,float weight[],float profit[],float capacity)
{
	float x[20],tp=0;
	int i,j,u;
	u=capacity;
	for(i=0;i<n;i++)
	{
		x[i]=0.0;
	}
	for(i=0;i<n;i++)
	{
		if(weight[i]>u)
		{
			break;
		}
		else
		{
			x[i]=1.0;
			tp=tp+profit[i];
			u=u-weight[i];
		
		}
	}
	if(i<n)
	{
		x[i]=u/weight[i];
	}
	tp=tp+(x[i]*profit[i]);
	printf("%.2f",tp);
     
}
void main()
{
	float weight[20],profit[20],capacity;
	int n,i,j;
	float ratio[20],temp;
	scanf("%d",&n);
	scanf("%f",&capacity);
	for(i=0;i<n;i++)
	{
		scanf("%f %f",&profit[i],&weight[i]);
	}
	for(i=0;i<n;i++)
	{
		ratio[i]=profit[i]/weight[i];
	}
	for(i=0;i<n;i++)
	{
		for(j=i+1;j<n;j++)
		{
			if(ratio[i]<ratio[j])
			{
				temp=ratio[j];
				ratio[j]=ratio[i];
				ratio[i]=temp;
				temp=weight[j];
				weight[j]=weight[i];
				weight[i]=temp;
				temp=profit[j];
				profit[j]=profit[i];
				profit[i]=temp;


			}
		}
	}
	knapsack(n,weight,profit,capacity);

}
.......................................................................................................
JOB SEQUENCING WITH DEAD LINES
#include <stdio.h>
#define MAX_JOBS 100
typedef struct {
    int index;
    int profit;
    int deadline;
} Job;
int checkSlot(int k, int slots[]) {
    for (int i = k; i > 0; i--) {
        if (slots[i] == 0) {
            slots[i] = 1;
            return i;
        }
    }
    return -1;
}
void sortJobsByProfit(Job jobs[], int n) {
    for (int i = 0; i < n-1; i++) {
        for (int j = 0; j < n-i-1; j++) {
            if (jobs[j].profit < jobs[j+1].profit) {
                Job temp = jobs[j];
                jobs[j] = jobs[j+1];
                jobs[j+1] = temp;
            }
        }
    }
}
void printJobSequence(Job jobs[], int n) {
    int slots[MAX_JOBS+1] = { 0 };
    printf("INDEX\tPROFIT\tDEADLINE\tSLOT ALLOTTED\n");
    for (int i = 0; i < n; i++) {
        int k = jobs[i].deadline;
        int slot = checkSlot(k, slots);
        if (slot != -1) {
printf("J%d\t%d\t%d\t[%d-%d]\n", jobs[i].index, jobs[i].profit, jobs[i].deadline, slot-1, slot);
        } else {
            printf("J%d\t%d\t%d\tREJECTED\n", jobs[i].index, jobs[i].profit, jobs[i].deadline);
        }
    }
}
int main() {
    int n;
    scanf("%d", &n);
    Job jobs[MAX_JOBS];
    for (int i = 0; i < n; i++) {
        jobs[i].index = i+1;
        scanf("%d", &jobs[i].profit);
        scanf("%d", &jobs[i].deadline);
    }
    sortJobsByProfit(jobs, n);
    printJobSequence(jobs, n);
    return 0;
}

...............................................................................................

minimum spanning tree

#include<stdio.h>
 int o=0;
 int c1=0;
 int t=0;
 int n;
 void all(int a[n][n],int l,int m)
 {
int i=m,j;
if(c1>=1)
return;
for(j=0;j<n;j++)
{
if(j!=l)
{
if(a[i][j]>0)
all(a,i,j);  
}
if((i==o || j==o))
{
if(a[i][j]>0)
{
c1=c1+1;
return;
}
}
}
return;
}
int main()
{
scanf("%d",&n);
int i,j,a[n][n];
for(i=0;i<n;i++)
{
for(j=0;j<n;j++)
scanf("%d",&a[i][j]);
}
int b[n][n];
for(i=0;i<n;i++)
{
for(j=0;j<n;j++)
b[i][j]=0;
}
int c[n];
int p=0;
c[p]=0;
p=p+1;
while(1)
{
int l=0,m=0;
int min=1000;
for(i=0;i<p;i++)
{
for(j=0;j<n;j++)
{
if(a[c[i]][j]<min && a[c[i]][j]!=0)
{
l=c[i];
m=j;
min=a[c[i]][j];
}
}
}
o=l;
t=m;
c1=0;
all(b,l,m);
if(c1==0)
{
b[l][m]=a[l][m];
b[m][l]=a[m][l];
c[p]=m;
p=p+1;
}
else
b[l][m]=0;
int u=0;
for(i=0;i<n;i++)
{
for(j=0;j<n;j++)
{
if(b[i][j]>0)
u=u+1;
}
}
if((u/2)==n-1)
break;
a[l][m]=0;
a[m][l]=0;        
}
int sum=0;
for(i=0;i<n;i++)
{
for(j=0;j<n;j++){
printf("%d ",b[i][j]);
sum=sum+b[i][j];
}
printf("\n");
}
printf("Total cost of spanning tree=%d",sum/2);
}
